// also known as subset sum problem


package dynamicprograming;
import java.util.*;




public class DYNAMICPROGRAMING {
    public static boolean issubset(int[]arr, int sum){
        if(arr.length==0){
            return false;
        }
        boolean [][]mat = new boolean[arr.length][sum+1];
        for(int i=0;i<arr.length;i++){
            mat[i][0]= true; 
        }
        for(int i=0;i<arr.length;i++){
            if(i==arr[0]){
                mat[0][i]=true;
            }
        }
        for(int i =1;i<arr.length;i++){
            for(int j=1;j<=sum;j++){
                if(mat[i-1][j]){
                    mat[i][j]=true;
                }
                else{
                    if(j>=arr[i]){
                        mat[i][j]= mat[i-1][j-arr[i]];
                    }
                }
            }
        }
        return mat[arr.length-1][sum];
    }
    
    
    
    
    
    
    
    
    
    
    
    
    <-----------------------------------------------------------********************----------------------------------------------->
    
    Recursive solution for target sum problem
    
    
package dynamicprograming;
import java.util.*;
public class DYNAMICPROGRAMING {
 
 public static boolean subsetsum(int[] set, int sum,int n){
     
    if(n==0 ){
        return false;
    }
    if(sum==0){
        return true;
    }
     if(set[n-1]>sum){
        return subsetsum(set,sum,n-1);
     }
     
     return subsetsum(set,sum-set[n-1],n-1) || subsetsum(set,sum,n-1) ;
 }
    
public static void main(String[]args){
int set[] = {3, 34, 4, 12, 5, 2};
int sum = 9;
int n = set.length;
System.out.print(subsetsum(set,sum,n));
    }
    
}

    
public static void main(String[]args){
   Scanner sc = new Scanner(System.in);
   int [] arr = {1,2,3,5};
    int sum = 7;
System.out.println(issubset(arr,sum));

   
   
    }
    
}
