// Partitioning Pallendromic String in Time Complexity N^3





import java.io.*;
import java.util.*;

public class Main {

	public static int minPalindromicCut(String s) {
		boolean dp[][] = new boolean [s.length()][s.length()];
    for(int g=0;g<s.length();g++){
        for(int i=0,j=g;j<dp.length;j++,i++){
            if(g==0){
                dp[i][j]=true;         }
            else if(g==1){
                dp[i][j] = s.charAt(i)==s.charAt(j);
            }
            else{
                if(s.charAt(i)==s.charAt(j) && dp[i+1][j-1]==true){
                    dp[i][j] = true;
                    
                }
                else{
                    dp[i][j] =false;
                }}}}
    
    int [][] cut = new int[s.length()][s.length()];
    for(int g=0;g<cut.length;g++){
        for(int i=0,j=g;j<cut.length;j++,i++){
            if(g==0){
                cut[i][j] = 0;
            }
            else if(g==1){
                if(s.charAt( i)== s.charAt(j)){
                    cut[i][j] = 0;
                }
                else{
                    cut[i][j] = 1;
                }
            }
            else{
                if(dp[i][j]){
                    cut[i][j] = 0;          // if the string is palindromic and in boolean dp it is true than we need 0 cuts
                }
                else{
                    int min = Integer.MAX_VALUE;
                    for(int k=i;k<j;k++){
                        int left = cut[i][k];
                        int right = cut[k+1][j];
                        if(left+right+1<min){
                            min = left+right+1;
                        }
                        
                    }
                    cut[i][j] = min;
                }
                
                
            }
        
    }
    }
                

		return cut[0][s.length()-1];
	}


	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		String str = scn.nextLine();
		System.out.println(minPalindromicCut(str));
	}
}
